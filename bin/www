#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


const io = require('socket.io')(server);


let waitingList = [];
let pool = []
io.on('connection', socket => {
  console.log(socket.id)
  socket.on('FIND_PARNER', name => {
    if(waitingList.length == 0){
      waitingList = [...waitingList, { socketId: socket.id, name }];
      console.log(waitingList)
    }else{
      partner = waitingList.shift()
      var _pool = [partner.socketId,socket.id]
      pool.push(_pool) 
      io.to(`${partner.socketId}`).emit('SET_UP_GAME', { playing: name, xIsNext: true,player: partner.name,opponent: name});
      socket.emit('SET_UP_GAME',{ playing: name, xIsNext: true,player: name,opponent: partner.name});
      io.to(`${partner.socketId}`).emit('SEND_PARTNER', { socketId: socket.id, name: name});
      socket.emit('SEND_PARTNER', partner);
    }
  });
  socket.on('SEND_MESSAGE', (messages) => {
      io.to(`${messages.to}`).emit('RECEIVE_MESSAGE', {message: messages.mes,from: messages.from});
      socket.emit('RECEIVE_MESSAGE',{message: messages.mes,from: messages.from});
  });
  socket.on('SEND_CARO', (position) => {
    io.to(`${position.partner}`).emit('SEND_CLICK', {position: position.pos});
    socket.emit('SEND_CLICK',{position:position.pos});
  });
  socket.on('UNDO', (partner) => {
    io.to(`${partner}`).emit('SEND_REQUEST');
  });
  socket.on('DRAW', (partner) => {
    io.to(`${partner}`).emit('SEND_REQUEST_2');
  });
  socket.on('NEW', (partner) => {
    io.to(`${partner}`).emit('SEND_REQUEST_3');
  });
  socket.on('LOSE', (partner) => {
    io.to(`${partner}`).emit('SEND_REQUEST_4');
  });
  socket.on('RESPONSE_UNDO', (res) => {
    console.log(res)
    io.to(`${res.partner}`).emit('SEND_RESPONSE',res.res);
    socket.emit('SEND_RESPONSE',res.res);
  });
  socket.on('RESPONSE_DRAW', (res) => {
    console.log(res)
    io.to(`${res.partner}`).emit('SEND_RESPONSE_2',res.res);
    socket.emit('SEND_RESPONSE_2',res.res);
  });
  socket.on('RESPONSE_NEW', (res) => {
    if(res.res == false){
      pool.forEach(ele=>{
        if(ele.filter(data => data === res.partner).length === 1)
          _pool = ele
      })
      pool = pool.filter(data=>data.filter(ele=> ele === res.partner).length !== 1)
    }
    io.to(`${res.partner}`).emit('SEND_RESPONSE_3',res.res);
    socket.emit('SEND_RESPONSE_3',res.res);
  });
  socket.on('RESPONSE_LOSE', (res) => {
    console.log(res)
    io.to(`${res.partner}`).emit('SEND_RESPONSE_4',res.res);
    socket.emit('SEND_RESPONSE_4_1',res.res);
  });
  socket.on('disconnect', () => {
    waitingList = waitingList.filter(data => data.socketId !== socket.id);
    var _pool = []
    pool.forEach(ele=>{
      if(ele.filter(data => data === socket.id).length === 1)
        _pool = ele
    })
    pool = pool.filter(data=>data.filter(ele=> ele === socket.id).length !== 1)
    _pool = _pool.filter(data => data!== socket.id)
    
    io.to(`${_pool[0]}`).emit('DISCONNECT');
  });
});